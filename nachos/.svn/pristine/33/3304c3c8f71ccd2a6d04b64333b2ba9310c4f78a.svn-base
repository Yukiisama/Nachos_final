#include "thread.h"
#include "userthread.h"
#include "system.h"
#ifdef CHANGED

userthread::userthread(){

}

struct function_with_arg
{
    int f;
    int arg;
    int exit;
};

static void StartUserThread(void *schmurtz){
    struct function_with_arg * s = (function_with_arg *) schmurtz;
    ASSERT(s!=NULL && s->f!=0 && s->arg!=0);
    //Init registers
    for (unsigned i = 0; i < NumTotalRegs; i++)
        machine->WriteRegister (i, 0);
    
    // TODO : LA METHODE EST ENCORE TROP SIMPLISTE : Y REFLECHIR !! Si méthode simple gardée : créer un cpt pour les threads ici ( static )
    int TopOfStack = currentThread->space->AllocateUserStack(currentThread->space->GetNbThread());
      
    // Initial program counter -- must be location of Thread function
    machine->WriteRegister (PCReg, s->f);
    DEBUG ('x', "DEBUG: Function: %d\n", s->f);

    // Give the arg of the function in register r4
    machine->WriteRegister (4, s->arg);
    DEBUG ('x', "DEBUG: Arg: %d\n", s->arg);

    // Need to also tell MIPS where next instruction is, because
    // of branch delay possibility
    machine->WriteRegister (NextPCReg, machine->ReadRegister(PCReg) + 4);
    DEBUG ('x', "DEBUG: NextPcReg: %d\n", machine->ReadRegister(PCReg) + 4);


    machine->WriteRegister (StackReg, TopOfStack);
    DEBUG ('x', "DEBUG: TopOfStack: %d\n", TopOfStack);
    //Relinquish the CPU if any other thread is ready to run.
    //currentThread->Yield();
    
    //Automatic Terminaison (thread_exit)
    machine->WriteRegister(RetAddrReg,s->exit); 
    
    machine->Run();
    
    delete s;
}

int do_ThreadCreate(int f , int arg){
    //Until further modification (TODO: better stack allocate) , we use a cpt to know which thread we create
    int pos = currentThread->space->ThreadMap->Find();
     if(pos==-1){
      //fprintf(stderr,"Map is full , you can't create more thread right know \n");
      return -1; // MAP IS FULL
    }
    currentThread->setCaseThread(pos);
    
   
    currentThread->space->AddTo_NbThread(+1);

    Thread * new_thread = new Thread ("new_thread"); 
    struct function_with_arg * schmurtz = new struct function_with_arg();
    schmurtz->f = f; schmurtz->arg = arg; 
    schmurtz->exit = machine->ReadRegister(6); //We get the adresse of ThreadExit
    new_thread->Start(StartUserThread,schmurtz);
    //Relinquish the CPU if any other thread is ready to run.
    //currentThread->Yield();
    return 0;
    //TODO: penser à delete thread  mais je pense pas qu'il faut le faire ici.
}
void do_ThreadExit(){
  if (currentThread->space->GetNbThread() > 0){
    currentThread->space->AddTo_NbThread(-1);
    currentThread->space->ReleaseCase(currentThread->getCaseThread());
  }

  if(currentThread->space->GetNbThread()<=0){
    currentThread->space->ReleaseMain();
    currentThread->space->ReleaseCase(0);
  }
  currentThread->Finish();
}
#endif // CHANGED
