// exception.cc 
//      Entry point into the Nachos kernel from user programs.
//      There are two kinds of things that can cause control to
//      transfer back to here from user code:
//
//      syscall -- The user code explicitly requests to call a procedure
//      in the Nachos kernel.  Right now, the only function we support is
//      "Halt".
//
//      exceptions -- The user code does something that the CPU can't handle.
//      For instance, accessing memory that doesn't exist, arithmetic errors,
//      etc.  
//
//      Interrupts (which can also cause control to transfer from user
//      code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"
#include "synchconsole.h"
//----------------------------------------------------------------------
// UpdatePC : Increments the Program Counter register in order to resume
// the user program immediately after the "syscall" instruction.
//----------------------------------------------------------------------
static void
UpdatePC ()
{
    int pc = machine->ReadRegister (PCReg);
    machine->WriteRegister (PrevPCReg, pc);
    pc = machine->ReadRegister (NextPCReg);
    machine->WriteRegister (PCReg, pc);
    pc += 4;
    machine->WriteRegister (NextPCReg, pc);
}


//----------------------------------------------------------------------
// ExceptionHandler
//      Entry point into the Nachos kernel.  Called when a user program
//      is executing, and either does a syscall, or generates an addressing
//      or arithmetic exception.
//
//      For system calls, the following is the calling convention:
//
//      system call code -- r2
//              arg1 -- r4
//              arg2 -- r5
//              arg3 -- r6
//              arg4 -- r7
//
//      The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//      "which" is the kind of exception.  The list of possible exceptions 
//      are in machine.h.
//---------------------------------------------------------------------

void
ExceptionHandler (ExceptionType which)
{
    int type = machine->ReadRegister (2);

    switch (which)
      {
	case SyscallException:
          {
	    switch (type)
	      {
		case SC_Halt:
		  {
		    DEBUG ('s', "Shutdown, initiated by user program.\n");
		    interrupt->Halt ();
		    break;
		  }
#ifdef CHANGED
		case SC_PutChar:
		{
			DEBUG ('s', "Putchar, initiated by user program\n");
			synchConsole->SynchPutChar (machine->ReadRegister(4));
			break;
		}
#endif // CHANGED
#ifdef CHANGED
		case SC_PutString:
		{
			DEBUG ('s', "PutString, initiated by user program\n");
			int size = machine->ReadRegister(5);
			int size_done = 0; // Will count the size of the str written until now
			int from = machine->ReadRegister(4);
			while (size_done < size){ // Copying MAX_SIZE of the string, will iterate if the string is longer than MAX_SIZE
				char *  to = new char[MAX_STRING_SIZE+1];
				synchConsole->copyStringFromMachine(from+size_done, to, MAX_STRING_SIZE); // Moving of MAX_SIZE each iteration
				synchConsole->SynchPutString(to);
				delete [] to;
				size_done += MAX_STRING_SIZE;
			}
			break;
		}
		case SC_GetChar:
		{
			DEBUG ('s', "GetChar, initiated by user program\n");
			int c = synchConsole->SynchGetChar();
			machine->WriteRegister(2,c);
			break;
		}
		
		case SC_Exit:
		{
			DEBUG ('s', "The program exited\n");
			//printf("3--> %d",machine->ReadRegister(3));
			Exit (machine->ReadRegister(3));
			break;
		}
		
		case SC_GetString:
		{
			DEBUG ('s', "GetString, initiated by user program\n");
			int to   = machine->ReadRegister(4);
			int size = machine->ReadRegister(5);
			int size_done = 0;
			char * from = new char[MAX_STRING_SIZE+1]; // '\0' will be insert at last position after the size characters
			while (size_done < size){
				synchConsole->SynchGetString(from, MAX_STRING_SIZE);
				int r = synchConsole->copyStringToMachine(to+size_done, from, MAX_STRING_SIZE);
				if (r != 0) break; // r !== 0 means we encountered a \0 or a \n, so we stop reading
				size_done += MAX_STRING_SIZE;
			}
			delete [] from;
			break;
		}
		
		case SC_PutInt:
		{
			int arg = machine->ReadRegister(4);
			synchConsole->SynchPutInt(arg);
			break;
		}
		case SC_GetInt:
		{
			int * arg = new int;
			*arg = machine->ReadRegister(4);
			synchConsole->SynchGetInt(arg);
			delete arg;
			break;
		}		
		
#endif // CHANGED
		default:
		  {
		    printf("Unimplemented system call %d\n", type);
		    ASSERT(FALSE);
		  }
	    }

	    // Do not forget to increment the pc before returning!
	    UpdatePC ();
	    break;
	  }

	case PageFaultException:
	  if (!type) {
	    printf("NULL dereference at PC %x!\n", machine->registers[PCReg]);
	    ASSERT (FALSE);
	  } else {
	    printf ("Page Fault at address %x at PC %x\n", type, machine->registers[PCReg]);
	    ASSERT (FALSE);	// For now
	  }
	  break;
	
	default:
	  printf ("Unexpected user mode exception %d %d at PC %x\n", which, type, machine->registers[PCReg]);
	  ASSERT (FALSE);
      }
}

